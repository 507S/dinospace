{"ast":null,"code":"var _jsxFileName = \"D:\\\\DinoSpaceNew\\\\dinospace\\\\client\\\\src\\\\reservation\\\\Reserve.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport axios from 'axios';\nimport Select from 'react-select';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Reserve = () => {\n  _s();\n\n  const params = useParams(); /// console.log(params);\n\n  const restaurantID = params.id;\n  const [reservationName, setReserveName] = useState(\"\");\n  const [date, setReserveDate] = useState(\"\");\n  const [person, setReservePerson] = useState(1);\n  const [time, setReservetime] = useState(1);\n  const [option2, setReserveoption] = useState(\"\");\n  const [optionname, setReserveoptionname] = useState(\"\");\n  const [initialState, setInitialState] = useState([]);\n  const [initialState2, setInitialState2] = useState([]);\n\n  const timeComparison = () => {\n    if (time >= initialState.openTime && time <= initialState.closeTime) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const handleSubmit = async () => {\n    console.log(\"lol\" + restaurantID);\n    const newReserve = {\n      restaurantID,\n      option2,\n      optionname,\n      reservationName,\n      date,\n      person,\n      reserve_status: \"DONE\",\n      time\n    };\n    console.log(newReserve);\n\n    try {\n      fetch(`/post/${restaurantID}`).then(res => {\n        return res.json();\n      }).then(jsonResponse => setInitialState(jsonResponse)); //test run for time validation of reservation\n      // if(timeComparison()){\n      //     console.log(\"ok\");\n      // }\n      // else{\n      //     console.log(\"not ok\");\n      // }\n\n      fetch(`/offer/${restaurantID}`).then(res => {\n        return res.json();\n      }).then(jsonResponse => {\n        setInitialState2(jsonResponse);\n      });\n      console.log(\"INITIALSTATE:\" + initialState2);\n      let remainingSits = 0;\n      let seatfound = false;\n      initialState2.forEach(element => {\n        if (element._id == option2) {\n          console.log(\"we are watching\" + element.remainingSits);\n          remainingSits = element.remainingSits - person;\n          console.log(\"we are watching\" + remainingSits);\n\n          if (remainingSits < 0) {\n            alert(\"sorry, there is not enough seats available\");\n          } else {\n            seatfound = true;\n            setReserveoptionname(element.offeringName);\n            console.log(\"we are watching offering name\" + optionname);\n          }\n        }\n      });\n\n      if (seatfound) {\n        const response = await axios.post('/reserve/', newReserve);\n        console.log(response);\n        const response3 = await axios.patch(`/offer/${option2}`, {\n          remainingSits\n        });\n      } else {\n        alert(\"sorry, your reservation isnt processed for server issues\");\n      } //this is working but in line 57 \n      //it is not working as it cannot current accss remainig sit \n\n    } catch (error) {\n      console.log(error);\n    }\n  }; //making options dropdown\n\n\n  const [options, setOptions] = useState(null);\n  useEffect(() => {\n    getoptions();\n  }, []);\n\n  async function getoptions() {\n    const {\n      data\n    } = await axios.get(`/offer/${restaurantID}`);\n    const option = data.map(item => ({\n      \"value\": item._id,\n      \"label\": item.offeringName\n    }));\n    console.log(\"we are seening option: \" + option);\n    setOptions(option);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Reservation Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setReserveName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Reserving date\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        onChange: e => setReserveDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Number of Person\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"Number\",\n        onChange: e => setReservePerson(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Which offerings you want to attend\", /*#__PURE__*/_jsxDEV(Select, {\n        options: options,\n        onChange: e => setReserveoption(e.value),\n        name: \"subjects\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      onClick: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Reserve, \"gIujT/bx7XqFojP+ktGmmiVF7yM=\", false, function () {\n  return [useParams];\n});\n\n_c = Reserve;\nexport default Reserve;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reserve\");","map":{"version":3,"sources":["D:/DinoSpaceNew/dinospace/client/src/reservation/Reserve.js"],"names":["React","axios","Select","useEffect","useState","useParams","Reserve","params","restaurantID","id","reservationName","setReserveName","date","setReserveDate","person","setReservePerson","time","setReservetime","option2","setReserveoption","optionname","setReserveoptionname","initialState","setInitialState","initialState2","setInitialState2","timeComparison","openTime","closeTime","handleSubmit","console","log","newReserve","reserve_status","fetch","then","res","json","jsonResponse","remainingSits","seatfound","forEach","element","_id","alert","offeringName","response","post","response3","patch","error","options","setOptions","getoptions","data","get","option","map","item","e","target","value"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport Select from 'react-select'\r\nimport { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst Reserve = () => {\r\n    const params = useParams();\r\n   /// console.log(params);\r\n    const restaurantID=params.id;\r\n    const[reservationName,setReserveName]=useState(\"\");\r\n    const[date,setReserveDate]=useState(\"\");\r\n    const[person,setReservePerson]=useState(1);\r\n    const[time,setReservetime]=useState(1);\r\n    const[option2,setReserveoption]=useState(\"\");\r\n    const[optionname,setReserveoptionname]=useState(\"\");\r\n    const[initialState,setInitialState]=useState([]);\r\n    const[initialState2,setInitialState2]=useState([]);\r\n    const timeComparison=() => {\r\n        if(time>=initialState.openTime && time<=initialState.closeTime){\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n    const handleSubmit=async()=>{\r\n        console.log(\"lol\"+ restaurantID);\r\n        const newReserve={\r\n            restaurantID,\r\n            option2,\r\n            optionname,\r\n            reservationName,\r\n            date,\r\n            person,\r\n            reserve_status:\"DONE\",\r\n            time\r\n        }\r\n        console.log(newReserve);\r\n        try {\r\n            fetch(`/post/${restaurantID}`).then(res => {\r\n                return res.json();\r\n            }).then(jsonResponse => setInitialState(jsonResponse));\r\n            //test run for time validation of reservation\r\n            // if(timeComparison()){\r\n            //     console.log(\"ok\");\r\n            // }\r\n            // else{\r\n            //     console.log(\"not ok\");\r\n            // }\r\n            fetch(`/offer/${restaurantID}`).then(res => {\r\n                return res.json();\r\n            }).then(jsonResponse => { setInitialState2(jsonResponse);});             \r\n            console.log(\"INITIALSTATE:\" + initialState2);\r\n            let remainingSits=0;\r\n            let seatfound=false;\r\n            initialState2.forEach(element => {\r\n                if (element._id == option2){\r\n                    console.log(\"we are watching\" + element.remainingSits);\r\n                    remainingSits=element.remainingSits-person;\r\n                    console.log(\"we are watching\" + remainingSits);\r\n                    if(remainingSits<0){\r\n                        alert(\"sorry, there is not enough seats available\");\r\n                    }\r\n                    else{\r\n                        seatfound=true;\r\n                        setReserveoptionname(element.offeringName);\r\n                        console.log(\"we are watching offering name\" + optionname);\r\n                    }\r\n                }\r\n            })\r\n           \r\n            \r\n           \r\n            if(seatfound){\r\n                const response = await axios.post('/reserve/', newReserve);\r\n                console.log(response);\r\n                const response3= await axios.patch(`/offer/${option2}`, {remainingSits});\r\n            }\r\n            else{\r\n                alert(\"sorry, your reservation isnt processed for server issues\");\r\n            }\r\n           //this is working but in line 57 \r\n                                                                                    //it is not working as it cannot current accss remainig sit \r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    //making options dropdown\r\n    const [ options, setOptions ] = useState(null);\r\n    useEffect(() => {\r\n        getoptions();\r\n    }, []);\r\n    async function getoptions(){\r\n    const { data } = await axios.get(`/offer/${restaurantID}`)\r\n    const option = data.map((item)=>({\r\n        \"value\" : item._id,\r\n        \"label\" : item.offeringName\r\n    }))\r\n    console.log(\"we are seening option: \"+option);\r\n    setOptions (option)\r\n    }\r\n    return ( \r\n    <div>\r\n         <label>\r\n        Reservation Name\r\n        <input type=\"text\" onChange={e=>setReserveName(e.target.value)}/>\r\n        </label>\r\n        <label>\r\n        Reserving date\r\n        <input type=\"date\" onChange={e=>setReserveDate(e.target.value)}/>\r\n        </label>\r\n        <label>\r\n        Number of Person\r\n        <input type=\"Number\" onChange={e=>setReservePerson(e.target.value)}/>\r\n        </label>\r\n        <label>\r\n        Which offerings you want to attend\r\n        <Select\r\n            options={options}\r\n            onChange={(e)=>setReserveoption(e.value)}\r\n            name=\"subjects\"\r\n        />\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" onClick={handleSubmit}/>\r\n\r\n    </div> );\r\n}\r\n \r\nexport default Reserve;"]},"metadata":{},"sourceType":"module"}